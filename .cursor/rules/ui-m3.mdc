---
alwaysApply: true
---

# Flutter Development Rules - Advanced UI Features

This document covers advanced UI features, Material 3 guidelines, accessibility, and responsive design patterns for Flutter applications.

## Material 3 Guidelines

Flutter applications should leverage the latest Material Design system, Material 3, to provide a modern, consistent, and adaptive user experience. Adhering to these guidelines ensures your app aligns with contemporary design standards.

*   **Enable Material 3:** Always set `useMaterial3: true` in your `MaterialApp` widget. This is the foundational step to activate Material 3 features and styling throughout your application.
*   **Theming:** Define a comprehensive app theme using `ThemeData` and `ColorScheme`. Material 3 emphasizes dynamic color and a more expressive color system.
    *   Use `ColorScheme.fromSeed` to generate a consistent color palette based on a single seed color. This simplifies theme creation and ensures harmonious color relationships.
    *   Define primary, secondary, tertiary, and surface colors, along with their container and on-colors, to fully utilize the Material 3 color system.
*   **Dynamic Color:** Implement dynamic color capabilities to allow the app's color scheme to adapt to the user's system preferences (e.g., wallpaper-based colors on Android 12+). This enhances personalization and system integration.
*   **Updated Components:** Utilize the updated Material 3 components (e.g., `NavigationBar`, `FilledButton`, `OutlinedButton`, `ElevatedButton`, `TextButton`, `SegmentedButton`, `AlertDialog`, `BottomSheet`, `Card`, `Chip`, `DatePicker`, `TimePicker`, `Dialog`, `Drawer`, `ExpansionPanel`, `FloatingActionButton`, `ListTile`, `Menu`, `NavigationDrawer`, `NavigationRail`, `PopupMenuButton`, `ProgressBar`, `Radio`, `Slider`, `SnackBar`, `Switch`, `TabBar`, `TextField`, `Tooltip`). These components offer refreshed visuals, improved accessibility, and enhanced functionality.
*   **New Material 3 Components (Flutter 3.35.1):** Utilize the latest Material 3 components for enhanced user experience:
    *   **DropdownMenuFormField:** Use for form-integrated dropdown menus with better validation and accessibility support.
    *   **Enhanced NavigationRail:** Take advantage of improved NavigationRail with better Material 3 theming and accessibility features.
    *   **CupertinoExpansionTile:** Use for iOS-style expandable content sections that maintain platform consistency.

*   **Color API Updates (Flutter 3.27+):** Important changes to the Color API for better precision and consistency:
    *   **withOpacity Deprecation:** The `Color.withOpacity()` method is deprecated in Flutter 3.27+.
    *   **Reason:** Color's alpha channel became a floating-point value, making `withOpacity()` redundant.
    *   **Replacement:** Use `Color.withValues(alpha: ...)` instead for better precision and alignment with the new Color representation.
    *   **Example:**
        ```dart
        // ❌ Deprecated
        Color primaryWithOpacity(double opacity) {
          return colorScheme.primary.withOpacity(opacity);
        }
        
        // ✅ Recommended
        Color primaryWithOpacity(double opacity) {
          return colorScheme.primary.withValues(alpha: opacity);
        }
        ```

### Flutter 3.35.0 Material 3 Updates

*   **Enhanced NavigationRail:** Now supports scrollable content with improved Material 3 theming and accessibility features.
*   **NavigationDrawer:** Now supports header and footer sections for better organization and user experience.
*   **Component Removals:**
    *   **TextSelectionToolbar (Removed):** Use `AdaptiveTextSelectionToolbar` for cross-platform text selection.
    *   **Migration:** Replace `TextSelectionToolbar` with `AdaptiveTextSelectionToolbar`.
    *   **Example:** `AdaptiveTextSelectionToolbar(actions: [...])`
*   **Adaptive Design:** Ensure the UI adapts gracefully to different screen sizes and form factors, leveraging Material 3's adaptive components and responsive layout principles. This is crucial for providing an optimal experience across mobile, tablet, and desktop devices.
*   **Typography:** Adopt the Material 3 typography scale, which provides a more refined and flexible system for text styles. Use `TextTheme` to define and apply consistent typography throughout your application.
*   **Elevation and Shadows:** Understand and apply the new elevation and shadow system in Material 3, which uses a combination of color and subtle shadows to convey depth and hierarchy.

## Enhanced Accessibility (a11y) Guidelines

Ensuring your Flutter application is accessible to all users, including those with disabilities, is crucial for inclusive design. These guidelines expand on best practices for building accessible Flutter UIs.

*   **Semantic Widgets:** Prioritize the use of Flutter\'s semantic widgets to provide meaningful information to accessibility services. This includes:
    *   `Semantics`: Use this widget to add semantic descriptions to your UI, especially for custom widgets or when the default semantics are insufficient. Provide clear `label`, `value`, `hint`, and `increasedValue/decreasedValue` properties as appropriate.
    *   `ExcludeSemantics`: Use when a subtree of widgets should not be exposed to accessibility services.
    *   `MergeSemantics`: Use to merge the semantics of multiple widgets into a single semantic node, which can simplify the user experience for screen reader users.
*   **Labels and Hints:** Provide clear, concise, and descriptive labels and hints for all interactive and informative UI elements. These are crucial for screen reader users to understand the purpose and state of elements.
    *   For `Text` widgets, ensure the content itself is descriptive.
    *   For `Icon` buttons or images, use `Semantics(label: \'Description\')` to provide an audible label.
    *   For input fields, use `InputDecoration`\'s `labelText` or `hintText` properties, which are automatically exposed to accessibility services.
*   **Contrast Ratios:** Ensure sufficient color contrast between text and its background, and between interactive elements and their surroundings. This helps users with low vision or color blindness to perceive content.
    *   Adhere to WCAG (Web Content Accessibility Guidelines) standards for contrast ratios (e.g., 4.5:1 for normal text, 3:1 for large text and graphical objects).
    *   Utilize Flutter\'s `ThemeData` to define a color scheme that meets accessibility standards.
*   **Tap Targets:** Ensure all interactive elements (buttons, checkboxes, text fields) have a minimum tap target size of at least 48x48 logical pixels. This makes it easier for users with motor impairments to accurately interact with your app.
    *   Even if the visual size of a widget is smaller, use `MaterialTapTargetSize.padded` or `SizedBox` to expand the interactive area.
*   **Keyboard Navigation:** Design your application to be fully navigable and operable using only a keyboard. This is essential for users who cannot use a mouse or touch screen.
    *   Ensure a logical tab order for interactive elements.
    *   Provide clear visual focus indicators for the currently focused element.
    *   Handle keyboard events (e.g., `onKey`, `RawKeyboardListener`) for custom controls.
*   **Testing Tools:** Regularly test your application with accessibility tools.
    *   **Flutter\'s `AccessibilityNode`:** Use the Flutter DevTools Widget Inspector to view the accessibility tree and verify semantic information.
    *   **Platform-Specific Tools:** Utilize native accessibility scanners (e.g., TalkBack on Android, VoiceOver on iOS) to experience your app as an accessibility user.
    *   **Automated Accessibility Checks:** Integrate automated checks into your testing pipeline where possible to catch common accessibility violations early.
*   **New Accessibility Tools (Flutter 3.35.1):** Leverage enhanced accessibility features for better inclusive design:
    *   **SemanticsLabelBuilder:** Use for dynamic semantic label generation based on widget state or content, providing more contextual accessibility information.
    *   **SliverEnsureSemantics:** Implement for ensuring proper semantic structure in scrollable lists and complex layouts, improving screen reader navigation.

