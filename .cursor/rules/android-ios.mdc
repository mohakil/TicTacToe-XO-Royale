---
alwaysApply: true
---
# Flutter Development Rules - Platform-Specific Guidelines

This document covers platform-specific guidelines for iOS and Android Flutter applications.

## iOS-Specific Guidelines

When developing Flutter apps for iOS, adhere to Apple's Human Interface Guidelines and leverage platform-specific features for a native iOS experience.

### iOS Design and UX Guidelines

*   **Human Interface Guidelines (HIG):** Follow Apple's Human Interface Guidelines for iOS apps. This includes using system-provided UI elements correctly, respecting safe areas, and maintaining platform conventions.
*   **Navigation Patterns:**
    *   **Tab Bar:** Use `CupertinoTabBar` or `CupertinoTabScaffold` for primary navigation with tabs. Ensure tabs are ordered logically and use system icons where appropriate.
    *   **Navigation Bar:** Use `CupertinoNavigationBar` or `CupertinoSliverNavigationBar` for hierarchical navigation. Ensure back buttons and titles follow iOS conventions.
    *   **Modal Presentations:** Use appropriate modal presentation styles (full screen, sheet, popover) based on content and context.
*   **Touch Targets:** Ensure all interactive elements meet iOS minimum touch target sizes (44x44 points). This ensures accessibility and usability.
*   **Typography:** Use iOS system fonts (`SF Pro`) and dynamic type sizes to ensure text scales appropriately with user preferences.
*   **Icons and Images:**
    *   Use SF Symbols for system icons. These are vector-based and scale perfectly.
    *   Provide appropriate image assets for different screen densities (@2x, @3x).
    *   Use `CupertinoIcons` for common iOS icons.
*   **System Colors:** Use `CupertinoColors` for system-defined colors that automatically adapt to light and dark modes.
*   **Safe Areas:** Respect iOS safe areas for notches, home indicators, and other system UI elements using `SafeArea` or `MediaQuery.padding`.
*   **Haptic Feedback:** Use `HapticFeedback` for appropriate user interactions (success, warning, error) to provide tactile feedback.
*   **Status Bar:** Manage status bar appearance using `SystemChrome.setSystemUIOverlayStyle` and respect safe areas.

### iOS Platform Integration

*   **App Store Guidelines:** Ensure compliance with App Store Review Guidelines, including content policies, data usage, and business model requirements.
*   **App Store Optimization (ASO):**
    *   Optimize app name, subtitle, keywords, and description for discoverability.
    *   Use high-quality screenshots and preview videos.
    *   Encourage positive ratings and reviews.
*   **In-App Purchases:** Implement StoreKit for in-app purchases, subscriptions, and consumables. Ensure proper receipt validation.
*   **Push Notifications:**
    *   Implement Apple Push Notification service (APNs) for remote notifications.
    *   Request appropriate permissions and handle notification registration.
    *   Test with both development and production certificates.
*   **HealthKit:** If applicable, integrate HealthKit for health and fitness data with proper user permissions.
*   **Core Location:** Use Core Location for location services with appropriate permission requests and background location handling.
*   **Camera and Photos:**
    *   Use `image_picker` or platform channels for camera/photo library access.
    *   Handle photo library permissions and privacy descriptions in Info.plist.
*   **Sign in with Apple:** Implement "Sign in with Apple" as required by App Store guidelines for apps that offer other social login options.
*   **iCloud:** Use CloudKit for cloud storage and synchronization with proper entitlements.
*   **Siri Shortcuts:** Integrate Siri Shortcuts for voice commands and app actions.
*   **App Tracking Transparency (ATT):** Implement ATT framework for user tracking and advertising identifiers.

### Flutter 3.35.0 iOS Breaking Changes

*   **CupertinoDatePicker.use24hFormat (Removed):**
    *   **Instead:** 24-hour format is now automatically determined by locale.
    *   **Migration:** Remove `use24hFormat` property, format adapts automatically.
*   **Cupertino Component Callback Signature Changes:**
    *   **CupertinoActionSheet.actions:** Now `List<CupertinoActionSheetAction>`
    *   **CupertinoAlertDialog.actions:** Now `List<CupertinoDialogAction>`
    *   **CupertinoTabScaffold.tabBar:** Now `PreferredSizeWidget`
    *   **CupertinoSliverNavigationBar.largeTitle:** Now `String?`
    *   **CupertinoSearchTextField.onChanged:** Now `String` parameter
    *   **CupertinoSegmentedControl.onValueChanged:** Now `int` parameter
    *   **CupertinoSwitch.onChanged:** Now `bool` parameter
    *   **CupertinoSlider.onChanged:** Now `double` parameter
    *   **CupertinoPageScaffold.navigationBar:** Now `PreferredSizeWidget`
    *   **CupertinoScrollbar.thickness:** Now `double?`
    *   **CupertinoTextField.onChanged:** Now `String` parameter
    *   **CupertinoTimerPicker.onTimerDurationChanged:** Now `Duration` parameter
    *   **CupertinoPicker.onSelectedItemChanged:** Now `int` parameter
    *   **CupertinoActionSheetAction.onPressed:** Now `VoidCallback`
    *   **CupertinoDialogAction.onPressed:** Now `VoidCallback`
    *   **CupertinoButton.onPressed:** Now `VoidCallback`
    *   **CupertinoPageTransition.primaryRouteAnimation:** Now `Animation<double>?`
    *   **CupertinoPageTransition.secondaryRouteAnimation:** Now `Animation<double>?`
    *   **CupertinoFullscreenDialogTransition.primaryRouteAnimation:** Now `Animation<double>?`
    *   **CupertinoFullscreenDialogTransition.secondaryRouteAnimation:** Now `Animation<double>?`

### Enhanced iOS Features (Flutter 3.35.0)

*   **Enhanced Haptic Feedback:**
    *   **CupertinoPicker:** Now includes haptic feedback for better iOS experience.
    *   **CupertinoSlider:** Now includes haptic feedback for better iOS experience.

## Android-Specific Guidelines

When developing Flutter apps for Android, follow Material Design principles and leverage Android-specific features for a native Android experience.

### Android Design and UX Guidelines

*   **Material Design 3:** Follow Material Design 3 guidelines for Android apps. This includes using Material components, elevation, and motion.
*   **Navigation Patterns:**
    *   **Bottom Navigation:** Use `BottomNavigationBar` or `NavigationBar` for primary navigation with 3-5 top-level destinations.
    *   **Navigation Drawer:** Use `Drawer` for navigation with many destinations or hierarchical navigation.
    *   **App Bar:** Use `AppBar` or `SliverAppBar` for top-level navigation with proper back button handling.
    *   **Floating Action Button (FAB):** Use `FloatingActionButton` for primary actions. Ensure it follows Material Design guidelines for placement and behavior.
*   **Touch Targets:** Ensure all interactive elements meet Android minimum touch target sizes (48x48 dp). This ensures accessibility and usability.
*   **Typography:** Use Material Design typography scales and ensure text scales appropriately with user preferences.
*   **Icons and Images:**
    *   Use Material Design icons or custom icons that follow Material Design principles.
    *   Provide appropriate image assets for different screen densities (mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi).
*   **System Colors:** Use Material Design color palettes and ensure proper contrast ratios.
*   **Safe Areas:** Respect Android system bars (status bar, navigation bar) using `SafeArea` or `SystemChrome.setSystemUIOverlayStyle`.
*   **Haptic Feedback:** Use `HapticFeedback` for appropriate user interactions to provide tactile feedback.
*   **Edge-to-Edge:** Implement edge-to-edge layouts for immersive experiences on modern Android devices.

### Android Platform Integration

*   **Google Play Guidelines:** Ensure compliance with Google Play Developer Policy Center guidelines, including content policies, data usage, and business model requirements.
*   **Google Play Optimization:**
    *   Optimize app listing with proper title, description, keywords, and high-quality screenshots.
    *   Use Google Play Console for A/B testing of store listings.
    *   Encourage positive ratings and reviews.
*   **Google Play Billing:** Implement Google Play Billing Library for in-app purchases, subscriptions, and consumables. Ensure proper purchase verification.
*   **Firebase Integration:**
    *   Use Firebase for analytics, crash reporting, performance monitoring, and cloud messaging.
    *   Implement Firebase Cloud Messaging (FCM) for push notifications.
*   **Google Sign-In:** Implement Google Sign-In for user authentication with proper OAuth configuration.
*   **Location Services:**
    *   Use Google Play Services Location API for location services.
    *   Handle runtime permissions and background location properly.
*   **Camera and Storage:**
    *   Use Android's camera and storage APIs with proper permission handling.
    *   Handle scoped storage requirements for Android 10+.
*   **Biometric Authentication:** Implement BiometricPrompt API for fingerprint and face authentication.
*   **Deep Linking:** Implement Android App Links for deep linking with proper intent filters.
*   **Android App Bundles:** Use Android App Bundles for optimized distribution and dynamic delivery.